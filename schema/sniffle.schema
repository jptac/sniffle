%% -*- erlang -*-
%% @doc When a failure occurs during create the process will retry starting
%% from to find a new server.
{mapping, "create_retry_delay", "sniffle.create_retry_delay",
 [{default, "5s"},
  {datatype, {duration, ms}}]}.

%% @doc Maximum number of retries before a creation fails. This means a failed
%% create will hang around at maximum create_max_retries*create_retry_delay.
{mapping, "create_max_retries", "sniffle.create_max_retries",
 [{default, 5},
  {datatype, integer}]}.

%% @doc The Amount of paralell create processes allowed to run at the same time
%% this does not include tasks running on the hypervisor.
{mapping, "create_pool_size", "sniffle.create_pool_size",
 [{default, 1},
  {datatype, integer}]}.

%% @doc Chunk size to upload to s3, please beware that this needs to match
%% LeoFS's large file chunk size!
{mapping, "s3image_chunk_size", "sniffle.image_chunk_size",
 [{default, "5MB"},
  {datatype, bytesize}]}.

%% @doc The TCP endpoint that will be broadcasted.
{mapping, "ip", "mdns_server_lib.listener",
 [{default, {"{{sniffle_ip}}", {{sniffle_port}} }},
  {datatype, ip}]}.

{translation,
 "mdns_client_lib.interface",
 fun(Conf) ->
         {IP, _Port} = cuttlefish:conf_get("ip", Conf),
         [A, B, C, D] = [list_to_integer(O) ||
                            O <- re:split(IP, "\\.", [{return, list}])],
         {A, B, C, D}
 end
}.

{translation,
 "mdns_server_lib.interface",
 fun(Conf) ->
         {IP, _Port} = cuttlefish:conf_get("ip", Conf),
         [A, B, C, D] = [list_to_integer(O) ||
                            O <- re:split(IP, "\\.", [{return, list}])],
         {A, B, C, D}
 end
}.

%% @doc The mDNS domain this installation is part of
{mapping, "domain", "mdns_server_lib.domain",
 [{default, ".local"},
  {commented, ".local"},
  {datatype, string}]}.

%% @doc The livetime of a broadcast, alsot he rebroadcast frequency
{mapping, "broadcast_interval", "mdns_server_lib.ttl",
 [{default, 120},
  {commented, 120},
  {datatype, {duration, s}}]}.

%% @doc The path data gets stored into.
{mapping, "platform_data_dir", "riak_core.platform_data_dir",
 [{default, "{{platform_data_dir}}"},
  {datatype, directory}]}.

{translation,
 "fifo_db.db_path",
 fun(Conf) ->
         cuttlefish:conf_get("platform_data_dir", Conf)
 end
}.

{translation,
 "riak_ensemble.data_root",
 fun(Conf) ->
         cuttlefish:conf_get("platform_data_dir", Conf)
 end
}.

{translation,
 "leveldb.data_root",
 fun(Conf) ->
         cuttlefish:conf_get("platform_data_dir", Conf)
 end
}.

%% @doc The default TCP handler, there is very very very
%% rarely any reason to change this.
{mapping, "tcp_callback", "mdns_server_lib.handler",
 [{datatype, string},
  {level, advanced},
  {default, "sniffle_tcp_handler"}]}.


{translation,
 "mdns_server_lib.handler",
 fun(Conf) ->
         Setting = cuttlefish:conf_get("tcp_callback", Conf),
         list_to_atom(Setting)
 end
}.

%% @doc The default Service that is announced, ther eis very very
%% rarely any reason to change this.
{mapping, "service", "mdns_server_lib.service",
 [{datatype, string},
  {default, "sniffle"}]}.

%% @doc The number of copies of the data that is keeped.
%% For good consistency N  < (R + W) should be true.
{mapping, "n", "sniffle.n",
 [{datatype, integer},
  {default, 3},
  {commented, 3}]}.

%% @doc The number of replies requried for a read request to succeed
%% The lower the value the faster the replies but the more likely stale
%% data is returend.
{mapping, "r", "sniffle.r",
 [{datatype, integer},
  {default, 2},
  {commented, 2}]}.

%% @doc The number of replies requried for a write request to succeed
%% The lower the value the faster the write but the more likely to only
%% write partial data.
{mapping, "w", "sniffle.w",
 [{datatype, integer},
  {default, 3},
  {commented, 3}]}.

%% @doc Timeout for completing a coverage request.
{mapping, "sniffle.coverage_timeout", "sniffle.coverage_timeout",
 [{default, "10s"},
  {commented, "10s"},
  {datatype, {duration, ms}}]}.

%% @doc Number of elements in each partial
{mapping, "sniffle.partial_size", "sniffle.partial_size",
 [{default, 20},
  {commented, 20},
  {datatype, integer}]}.

%% @doc This parameter defines the number of bytes of
%% server memory to assign to leveldb.  leveldb will dynamically
%% adjust it internal cache sizes as Riak activates / inactivates
%% vnodes on this server to stay within this size.  The memory size
%% can alternately be assigned as percentage of total server memory
%% via total_leveldb_mem_percent instead.
{mapping, "leveldb.total_leveldb_mem", "eleveldb.total_leveldb_mem", [
  {datatype, bytesize},
  {default, "512MB"},
  {level, advanced}
]}.

%% @doc the Size of the mmaped chunkes, this should be tuned according to
%% the number of open files and total memory present.
%% Default is 1MB to allow for a bigger number of small files, please tune
%% accordingly in bigger installations.
{mapping, "leveldb.mmap_size", "eleveldb.mmap_size",
 [{datatype, bytesize},
  {default, "1MB"}]}.


{mapping, "folsom_ddb.bucket", "folsom_ddb.bucket", [
    merge,
    {default, "fifo"}
]}.

{mapping, "folsom_ddb.prefix", "folsom_ddb.prefix", [
    merge,
    {default, "sniffle@127.0.0.1"}
]}.

%% @doc Schema directory
{mapping, "schema_dir", "riak_core.schema_dirs",
 [{default, "./share/schema"},
  {datatype, string}]
}.

{translation,
  "riak_core.schema_dirs",
  fun(Conf) ->
          D = cuttlefish:conf_get("schema_dir", Conf),
          [D]
  end
}.

%% @doc Home directory for the run user
{mapping, "run_user_home", "setup.home",
  [{default, "{{run_user_home}}"},
   hidden,
   {datatype, string}]}.
